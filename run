#!/usr/bin/env bash

# Color definitions 
DIM='\033[2m'
ITALIC='\033[3m'
UNDERLINE='\033[4m'
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
PURPLE='\033[1;35m'
CYAN='\033[1;36m'
WHITE='\033[1;37m'
GRAY='\033[0;90m'
NC='\033[0m'

# Spinner function for visual feedback
spinner() {
    local pid=$1
    local delay=0.1
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# Define the path to the PentsT root directory
PENTST_DIR="/home/$USER/pentsT"

# Create directories if they don't exist
mkdir -p "$PENTST_DIR"
mkdir -p "$PENTST_DIR/logs"
mkdir -p "$PENTST_DIR/configs"
mkdir -p "$PENTST_DIR/utils"

# Change to the PentsT root directory
cd "$PENTST_DIR" || { echo -e "${RED}Failed to change directory to $PENTST_DIR${NC}"; exit 1; }

# Display the banner with original visuals
echo -e "\e[34m██████╗ ███████╗███╗   ██╗████████╗███████╗████████╗\e[0m"
echo -e "\e[34m██╔══██╗██╔════╝████╗  ██║╚══██╔══╝██╔════╝╚══██╔══╝\e[0m"
echo -e "\e[34m██████╔╝█████╗  ██╔██╗ ██║   ██║   ███████╗   ██║   \e[0m"
echo -e "\e[34m██╔═══╝ ██╔══╝  ██║╚██╗██║   ██║   ╚════██║   ██║   \e[0m"
echo -e "\e[34m██║     ███████╗██║ ╚████║   ██║   ███████║   ██║   \e[0m"
echo -e "\e[34m╚═╝     ╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝   ╚═╝   \e[0m"
echo -e "\e[34m====================================================\e[0m"
echo -e "\e[34m        PENTST INSTALLATION SCRIPT v0.1 ALFA    \e[0m"
echo -e "\e[34m       Engineered and Maintained by 0xb0rn3      \e[0m"
echo -e "\e[34m====================================================\e[0m"
echo ""

# Create and configure the requirements file
echo -e "${BLUE}Setting up environment...${NC}"
cat > "$PENTST_DIR/utils/requirements.txt" << EOL
rich>=10.0.0
psutil>=5.8.0
EOL

# Create __init__.py in utils directory to make it a package
touch "$PENTST_DIR/utils/__init__.py"

# Create the setup script
cat > "$PENTST_DIR/setup_helper.sh" << 'EOL'
#!/usr/bin/env bash
# Suppress standard output
exec 3>&1
exec 1>/dev/null

# Function to print to original stdout
print_status() {
    echo -e "$1" >&3
}

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    print_status "\e[1;31mPlease run this script as root with sudo\e[0m"
    exit 1
fi

print_status "\e[1;34m⏳ Setting up environment...\e[0m"

# Function to install package quietly
install_package() {
    if ! dpkg -l "$1" &>/dev/null; then
        apt-get install -y "$1" &>/dev/null
        if [ $? -eq 0 ]; then
            print_status "\e[1;32m✓ Installed $1\e[0m"
        else
            print_status "\e[1;31m✗ Failed to install $1\e[0m"
            return 1
        fi
    fi
    return 0
}

# Install core dependencies
install_package python3 || exit 1
install_package python3-pip || exit 1
install_package wget || exit 1

# Install Python dependencies
print_status "\e[1;34m⏳ Installing Python libraries...\e[0m"
pip3 install --break-system-packages -r utils/requirements.txt &>/dev/null
if [ $? -eq 0 ]; then
    print_status "\e[1;32m✓ Python dependencies installed\e[0m"
else
    print_status "\e[1;31m✗ Failed to install Python dependencies\e[0m"
    exit 1
fi

# Check if core file exists
if [ ! -f core ]; then
    print_status "\e[1;31m✗ Core script not found\e[0m"
    exit 1
fi

# Make core executable
chmod +x core
print_status "\e[1;32m✓ Environment setup complete\e[0m"
print_status "\e[1;34m⏳ Starting core installation process...\e[0m"

# Execute the core script
./core

# Success message
print_status "\e[1;32m✓ PentsT setup completed!\e[0m"
EOL

# Make the setup helper executable
chmod +x "$PENTST_DIR/setup_helper.sh"

# Check if script is already running with sudo
if [ "$EUID" -eq 0 ]; then
    echo -e "${RED}⚠️ This initial setup should not be run with sudo.${NC}"
    echo -e "${YELLOW}Restarting without sudo privileges...${NC}"
    # Get the original user
    ORIG_USER=$(logname || echo "$SUDO_USER")
    if [ -z "$ORIG_USER" ]; then
        echo -e "${RED}Failed to determine the original user. Please run without sudo.${NC}"
        exit 1
    fi
    # Re-run the script as the original user
    su - "$ORIG_USER" -c "cd $PENTST_DIR && ./run"
    exit 0
fi

echo -e "${GREEN}✓ Initial setup complete${NC}"
echo -e "${BLUE}⏳ Now elevating privileges to install dependencies and tools...${NC}"

# Create a wrapper sudo command that preserves the PATH
sudo_command() {
    echo -e "${YELLOW}➤ Sudo privileges required to install system dependencies.${NC}"
    echo -e "${YELLOW}➤ You may be prompted for your password.${NC}"
    sudo -E "$@"
}

# Run the setup helper with sudo
if sudo_command "$PENTST_DIR/setup_helper.sh"; then
    echo -e "${GREEN}✓ Setup completed successfully!${NC}"
    echo -e "${BLUE}You can run PentsT anytime with:${NC}"
    echo -e "${CYAN}   cd $PENTST_DIR && sudo ./core ${NC}"
else
    echo -e "${RED}✗ Setup encountered issues. Check the logs for details.${NC}"
    echo -e "${YELLOW}You can try running the setup script manually:${NC}"
    echo -e "${CYAN}   sudo $PENTST_DIR/setup_helper.sh${NC}"
fi
