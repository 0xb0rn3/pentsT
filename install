#!/usr/bin/env bash

# Check if running as root
if [ $EUID -ne 0 ]; then
    echo "This script must be run as root. Please use sudo or switch to the root user."
    exit 1
fi

# Define colors for better readability
GREEN="\033[0;32m"
BLUE="\033[0;34m"
YELLOW="\033[1;33m"
RED="\033[0;31m"
CYAN="\033[0;36m"
NC="\033[0m" # No Color

# Display ASCII banner
display_banner() {
    echo -e "${CYAN}"
    echo -e "██████╗ ███████╗███╗   ██╗████████╗███████╗████████╗"
    echo -e "██╔══██╗██╔════╝████╗  ██║╚══██╔══╝██╔════╝╚══██╔══╝"
    echo -e "██████╔╝█████╗  ██╔██╗ ██║   ██║   ███████╗   ██║   "
    echo -e "██╔═══╝ ██╔══╝  ██║╚██╗██║   ██║   ╚════██║   ██║   "
    echo -e "██║     ███████╗██║ ╚████║   ██║   ███████║   ██║   "
    echo -e "╚═╝     ╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝   ╚═╝   "
    echo -e "${BLUE}====================================================${NC}"
    echo -e "${BLUE}           PENTST INSTALLATION SCRIPT            ${NC}"
    echo -e "${BLUE}====================================================${NC}"
}

# Get the absolute path of the script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_DIR="${SCRIPT_DIR}/configs"
UTILS_DIR="${SCRIPT_DIR}/utils"
REQUIREMENTS_FILE="${SCRIPT_DIR}/requirements.txt"

# Function to install Python requirements
install_requirements() {
    echo -e "\n${YELLOW}Installing Python requirements...${NC}"
    if [ -f "$REQUIREMENTS_FILE" ]; then
        pip3 install -r "$REQUIREMENTS_FILE" --break-system-packages
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}Python requirements installed successfully!${NC}"
        else
            echo -e "${RED}Failed to install Python requirements. Installation may not work correctly.${NC}"
            read -p "Do you want to continue with the installation? (y/n): " continue_choice
            if [[ ! $continue_choice =~ ^[Yy]$ ]]; then
                echo -e "${BLUE}Exiting installation script. Goodbye!${NC}"
                exit 1
            fi
        fi
    else
        echo -e "${RED}Requirements file not found at $REQUIREMENTS_FILE${NC}"
        read -p "Do you want to continue without installing Python requirements? (y/n): " continue_choice
        if [[ ! $continue_choice =~ ^[Yy]$ ]]; then
            echo -e "${BLUE}Exiting installation script. Goodbye!${NC}"
            exit 1
        fi
    fi
}

# Function to list all available configuration files
list_configs() {
    echo -e "\n${YELLOW}Available Configuration Categories:${NC}"
    local i=1
    
    # Create an array to store the config file paths
    declare -a config_files
    
    # Loop through each .ini file in the configs directory
    for config in "${CONFIG_DIR}"/*.ini; do
        # Extract just the filename without path and extension
        local config_name=$(basename "$config" .ini)
        echo -e "${i}) ${config_name}"
        config_files[i]="$config"
        ((i++))
    done
    
    # Add options for all configs and exit
    echo -e "${i}) Install ALL tool categories"
    ((i++))
    echo -e "${i}) Exit"
    
    # Export the config_files array to be used by the calling function
    export config_files
    return $i
}

# Function to install tools based on selected config
install_tools() {
    local config_path="$1"
    echo -e "\n${GREEN}Installing tools using configuration: ${YELLOW}$(basename "$config_path")${NC}"
    
    # Check if tooltime.py exists in utils directory
    if [ ! -f "${UTILS_DIR}/tooltime.py" ]; then
        echo -e "${RED}Error: tooltime.py not found in ${UTILS_DIR}${NC}"
        return 1
    fi
    
    # Run the tooltime.py script from the utils directory
    python3 "${UTILS_DIR}/tooltime.py" "$config_path"
    
    if [ $? -eq 0 ]; then
        echo -e "\n${GREEN}Installation completed successfully!${NC}"
        return 0
    else
        echo -e "\n${RED}Installation failed!${NC}"
        return 1
    fi
}

# Main menu function
main_menu() {
    while true; do
        echo -e "\n${YELLOW}What would you like to do?${NC}"
        list_configs
        local max_option=$?
        
        # Prompt user for selection
        read -p "Enter your choice [1-${max_option}]: " choice
        
        # Validate input
        if [[ ! $choice =~ ^[0-9]+$ ]] || [ $choice -lt 1 ] || [ $choice -gt $max_option ]; then
            echo -e "${RED}Invalid selection. Please try again.${NC}"
            continue
        fi
        
        # Process the selection
        if [ $choice -eq $((max_option)) ]; then
            # Exit option
            echo -e "${BLUE}Exiting installation script. Goodbye!${NC}"
            exit 0
        elif [ $choice -eq $((max_option-1)) ]; then
            # Install ALL option
            echo -e "\n${GREEN}Installing ALL tool categories...${NC}"
            local all_success=true
            for config in "${CONFIG_DIR}"/*.ini; do
                install_tools "$config"
                if [ $? -ne 0 ]; then
                    all_success=false
                fi
            done
            
            if [ "$all_success" = true ]; then
                echo -e "\n${GREEN}All tool categories installed successfully!${NC}"
            else
                echo -e "\n${YELLOW}Some tool categories may not have installed correctly.${NC}"
            fi
        else
            # Install specific config
            install_tools "${config_files[$choice]}"
        fi
        
        # Ask if the user wants to install more tools
        echo -e "\n${YELLOW}Would you like to install more tools?${NC}"
        read -p "Enter 'y' to continue or any other key to exit: " continue_choice
        if [[ ! $continue_choice =~ ^[Yy]$ ]]; then
            echo -e "${BLUE}Thank you for using PentsT! Goodbye!${NC}"
            exit 0
        fi
    done
}

# Check for directories and files
check_environment() {
    # Check if Python 3 is installed
    if ! command -v python3 &> /dev/null; then
        echo -e "${RED}Python 3 is required but not installed. Please install Python 3 and try again.${NC}"
        exit 1
    fi
    
    # Check if configs directory exists
    if [ ! -d "$CONFIG_DIR" ]; then
        echo -e "${RED}Error: configs directory not found at ${CONFIG_DIR}${NC}"
        exit 1
    fi
    
    # Check if utils directory exists
    if [ ! -d "$UTILS_DIR" ]; then
        echo -e "${RED}Error: utils directory not found at ${UTILS_DIR}${NC}"
        exit 1
    fi
    
    # Check if tooltime.py exists in utils directory
    if [ ! -f "${UTILS_DIR}/tooltime.py" ]; then
        echo -e "${RED}Error: tooltime.py not found in ${UTILS_DIR}${NC}"
        exit 1
    fi
    
    # Check if at least one config file exists
    if [ ! "$(ls -A ${CONFIG_DIR}/*.ini 2>/dev/null)" ]; then
        echo -e "${RED}Error: No .ini configuration files found in ${CONFIG_DIR}${NC}"
        exit 1
    fi
}

# Main execution
clear
display_banner
check_environment
install_requirements
main_menu
