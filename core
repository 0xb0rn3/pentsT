#!/usr/bin/env python3
import os
import sys
import subprocess
import time
import shutil
import psutil
from rich import print as rprint
from rich.layout import Layout
from rich.live import Live
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn
from rich.status import Status
from rich.prompt import Prompt, Confirm
from rich.table import Table
from rich.console import Console
from rich.columns import Columns
from rich.text import Text

# Configuration
PENTST_DIR = os.path.expanduser("~/pentsT")
LOG_DIR = f"{PENTST_DIR}/logs"
MAIN_LOG = f"{LOG_DIR}/operation.log"
REPO_NAME = "pentest_repo"
REPO_SRC = "http://http.kali.org/kali"
REPO_BRANCH = "kali-rolling"
KEYRING_URL = "https://kali.download/kali/pool/main/k/kali-archive-keyring/kali-archive-keyring_2024.1_all.deb"

# Rich console setup
console = Console()

def log_message(level, message, display=True):
    """Log messages to file and optionally display based on level."""
    timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
    os.makedirs(LOG_DIR, exist_ok=True)
    with open(MAIN_LOG, 'a') as log_file:
        log_file.write(f"[{timestamp}] [{level}] {message}\n")
    if display:
        if level == "SUCCESS":
            rprint(f"[green]✓ {message}[/green]")
        elif level == "WARNING":
            rprint(f"[yellow]⚠ {message}[/yellow]")
        elif level == "ERROR":
            rprint(f"[red]✗ {message}[/red]")
        elif level == "INFO":
            rprint(f"[blue]ℹ {message}[/blue]")

def check_privileges():
    """Ensure the script runs with appropriate privileges."""
    if os.geteuid() != 0:
        console.print("[bold red]⚠️ This operation requires elevated privileges[/bold red]")
        sys.exit(1)

def get_system_stats():
    """Get current system resource stats."""
    cpu_percent = psutil.cpu_percent(interval=0.1)
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    
    return {
        'cpu': cpu_percent,
        'memory_used': memory.percent,
        'memory_free': 100 - memory.percent,
        'memory_total': memory.total // (1024 * 1024),  # MB
        'disk_used': disk.percent,
        'disk_free': 100 - disk.percent,
        'disk_total': disk.total // (1024 * 1024 * 1024)  # GB
    }

def display_system_stats():
    """Display system resources in a nice panel."""
    stats = get_system_stats()
    
    cpu_text = Text(f"CPU: {stats['cpu']}%", style="bold white")
    if stats['cpu'] > 80:
        cpu_text.stylize("on red")
    elif stats['cpu'] > 60:
        cpu_text.stylize("on yellow")
    else:
        cpu_text.stylize("on green")
        
    mem_text = Text(f"Memory: {stats['memory_used']}% used, {stats['memory_free']}% free ({stats['memory_total']} MB total)", style="bold white")
    if stats['memory_used'] > 80:
        mem_text.stylize("on red")
    elif stats['memory_used'] > 60:
        mem_text.stylize("on yellow")
    else:
        mem_text.stylize("on green")
        
    disk_text = Text(f"Disk: {stats['disk_used']}% used, {stats['disk_free']}% free ({stats['disk_total']} GB total)", style="bold white")
    if stats['disk_used'] > 90:
        disk_text.stylize("on red")
    elif stats['disk_used'] > 70:
        disk_text.stylize("on yellow")
    else:
        disk_text.stylize("on green")
    
    return Panel(
        Columns([cpu_text, mem_text, disk_text], expand=True),
        title="[bold cyan]System Resources[/bold cyan]",
        border_style="cyan"
    )

def add_pentst_repos():
    """Add necessary repositories and set up APT pinning."""
    with console.status("[bold blue]Configuring repositories...[/bold blue]", spinner="dots"):
        # Download and install keyring
        log_message("INFO", "Installing repository keyring...", False)
        keyring_file = "/tmp/pentst-keyring.deb"
        try:
            subprocess.run(["wget", "-q", KEYRING_URL, "-O", keyring_file], check=True)
            subprocess.run(["dpkg", "-i", keyring_file], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            os.remove(keyring_file)
        except subprocess.CalledProcessError:
            log_message("ERROR", "Failed to install repository keyring")
            sys.exit(1)
        
        if not os.path.exists("/etc/apt/sources.list.d/pentst.list"):
            log_message("INFO", "Adding specialized repositories...", False)
            with open("/etc/apt/sources.list.d/pentst.list", "w") as f:
                f.write(f"deb {REPO_SRC} {REPO_BRANCH} main contrib non-free\n")
            
            try:
                subprocess.run(["apt-get", "update"], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                log_message("SUCCESS", "PentsT repositories added successfully")
            except subprocess.CalledProcessError:
                log_message("ERROR", "Failed to update repositories")
                sys.exit(1)
        else:
            log_message("INFO", "PentsT repositories already configured", False)

        if not os.path.exists("/etc/apt/preferences.d/pentst-pin"):
            log_message("INFO", "Setting up package pinning...", False)
            with open("/etc/apt/preferences.d/pentst-pin", "w") as f:
                f.write("Package: *\nPin: release o=Debian\nPin-Priority: 900\n\n"
                        "Package: *\nPin: release o=Kali\nPin-Priority: 100\n")
            
            try:
                subprocess.run(["apt-get", "update"], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                log_message("SUCCESS", "Package pinning set up successfully")
            except subprocess.CalledProcessError:
                log_message("ERROR", "Failed to update package preferences")
                sys.exit(1)
        else:
            log_message("INFO", "Package pinning already configured", False)

def get_all_available_tools():
    """Get comprehensive list of available tools."""
    all_tools = {}
    
    with console.status("[bold blue]Loading available tools...[/bold blue]", spinner="dots"):
        # Get relevant metapackages
        result = subprocess.run(["apt-cache", "search", "kali-tools-"], capture_output=True, text=True)
        metapackages = [line.split()[0] for line in result.stdout.splitlines() if "kali-tools-" in line]
        
        # Group tools by category (metapackage)
        for metapackage in metapackages:
            display_name = metapackage.replace("kali-tools-", "").title()
            try:
                tools = get_tools_from_package(metapackage)
                all_tools[display_name] = tools
            except Exception as e:
                log_message("ERROR", f"Failed to load tools for {display_name}: {str(e)}", False)
    
    return all_tools

def get_tools_from_package(package):
    """Extract tool list from a metapackage."""
    result = subprocess.run(
        ["apt-cache", "depends", "--recurse", "--no-recommends", "--no-suggests",
         "--no-conflicts", "--no-breaks", "--no-replaces", "--no-enhances", package],
        capture_output=True, text=True
    )
    tools = set(line.split(":")[1].strip() for line in result.stdout.splitlines()
                if line.strip().startswith("|Depends:") or line.strip().startswith("Depends:"))
    
    # Remove some common packages that aren't actual tools
    common_deps = ["libc6", "libgcc-s1", "libstdc++6", "python3", "python3-pip"]
    return sorted([t for t in tools if t not in common_deps and not t.startswith("lib")])

def is_tool_installed(tool):
    """Check if a tool is already installed."""
    try:
        result = subprocess.run(["dpkg", "-l", tool], capture_output=True, text=True)
        return "ii" in result.stdout
    except Exception:
        return False

def install_tool(tool, max_retries=3):
    """Install a tool with retries on failure."""
    for attempt in range(max_retries):
        result = subprocess.run(
            ["apt-get", "install", "-y", tool], 
            capture_output=True, 
            text=True
        )
        if result.returncode == 0:
            return True
        log_message("ERROR", f"Attempt {attempt+1} failed for {tool}", False)
        if attempt < max_retries - 1:
            time.sleep(2)
    return False

def display_menu(title, options, multi_select=False):
    """Display a rich menu with options."""
    console.print(f"[bold blue]{title}[/bold blue]")
    
    if multi_select:
        console.print("[dim](Use space to select multiple items, enter when done)[/dim]")
    
    table = Table(show_header=True, header_style="bold cyan")
    table.add_column("#", style="dim", width=4)
    table.add_column("Option", style="white")
    
    for i, option in enumerate(options, 1):
        table.add_row(str(i), option)
    
    console.print(table)
    
    if multi_select:
        selected = []
        while True:
            choice = Prompt.ask("Enter number to toggle (empty to finish)", default="")
            if not choice:
                break
            try:
                choice_num = int(choice)
                if 1 <= choice_num <= len(options):
                    item = options[choice_num-1]
                    if item in selected:
                        selected.remove(item)
                        console.print(f"[red]✗ Removed:[/red] {item}")
                    else:
                        selected.append(item)
                        console.print(f"[green]✓ Added:[/green] {item}")
                else:
                    console.print("[yellow]Invalid selection number[/yellow]")
            except ValueError:
                console.print("[yellow]Please enter a valid number[/yellow]")
        return selected
    else:
        while True:
            choice = Prompt.ask("Enter number", default="1")
            try:
                choice_num = int(choice)
                if 1 <= choice_num <= len(options):
                    return options[choice_num-1]
                else:
                    console.print("[yellow]Invalid selection number[/yellow]")
            except ValueError:
                console.print("[yellow]Please enter a valid number[/yellow]")

def offer_installation_options():
    """Prompt user to select installation method."""
    # Main menu
    main_options = [
        "Full toolkit installation", 
        "Install by category", 
        "Choose individual tools",
        "Install from custom list"
    ]
    selected_option = display_menu("Select installation profile:", main_options)
    
    # Define category mapping
    tool_categories = {
        "Top Tools": "kali-tools-top10",
        "Web Assessment": "kali-tools-web",
        "Wireless Tools": "kali-tools-wireless",
        "Forensics Tools": "kali-tools-forensics",
        "Exploitation": "kali-tools-exploitation",
        "Information Gathering": "kali-tools-information-gathering",
        "Password Tools": "kali-tools-passwords",
        "Reverse Engineering": "kali-tools-reverse-engineering",
        "Sniffing & Spoofing": "kali-tools-sniffing-spoofing",
        "Vulnerability Analysis": "kali-tools-vulnerability"
    }
    
    if "Full toolkit" in selected_option:
        tools = []
        with console.status("[bold blue]Loading full toolkit profile...[/bold blue]", spinner="dots"):
            for display_name, package_name in tool_categories.items():
                log_message("INFO", f"Adding {display_name} tools...", False)
                tools.extend(get_tools_from_package(package_name))
        return list(set(tools))  # Remove duplicates
        
    elif "by category" in selected_option:
        # Show categories
        categories = list(tool_categories.keys())
        selected_category_name = display_menu("Select tool category:", categories)
        package_name = tool_categories[selected_category_name]
        
        with console.status(f"[bold blue]Loading {selected_category_name} tools...[/bold blue]", spinner="dots"):
            tools = get_tools_from_package(package_name)
        return tools
        
    elif "individual tools" in selected_option:
        all_tools = {}
        with console.status("[bold blue]Loading available tools...[/bold blue]", spinner="dots"):
            for display_name, package_name in tool_categories.items():
                try:
                    category_tools = get_tools_from_package(package_name)
                    all_tools[display_name] = category_tools
                except Exception as e:
                    log_message("ERROR", f"Failed to load tools for {display_name}: {str(e)}", False)
        
        # Flatten and deduplicate tools
        flat_tools = []
        for category_tools in all_tools.values():
            flat_tools.extend(category_tools)
        unique_tools = sorted(set(flat_tools))
        
        # Show paginated tool selection
        page_size = 20
        selected_tools = []
        
        for i in range(0, len(unique_tools), page_size):
            page_tools = unique_tools[i:i+page_size]
            
            console.clear()
            console.print(f"[bold cyan]Tool Selection (Page {i//page_size + 1}/{(len(unique_tools)-1)//page_size + 1})[/bold cyan]")
            console.print("[dim]Select tools to install (space to select, enter when done)[/dim]")
            
            table = Table(show_header=True, header_style="bold cyan")
            table.add_column("#", style="dim", width=4)
            table.add_column("Tool Name", style="white")
            table.add_column("Status", style="green")
            
            for j, tool in enumerate(page_tools, 1):
                status = "[green]Installed[/green]" if is_tool_installed(tool) else "[yellow]Not Installed[/yellow]"
                table.add_row(str(j), tool, status)
            
            console.print(table)
            
            page_selected = display_menu(f"Select tools from page {i//page_size + 1}", page_tools, multi_select=True)
            selected_tools.extend(page_selected)
            
            if i + page_size < len(unique_tools):
                if not Confirm.ask("Continue to next page?", default=True):
                    break
        
        return selected_tools
        
    elif "custom list" in selected_option:
        list_file = Prompt.ask("Path to custom list (one tool per line)")
        try:
            with open(list_file, "r") as f:
                tools = f.read().splitlines()
            return tools
        except FileNotFoundError:
            log_message("ERROR", f"File not found: {list_file}")
            return []
    
    # Default fallback
    return []

def install_pentst_tools(tools):
    """Install selected tools with enhanced progress UI."""
    total = len(tools)
    successful, failed, skipped = 0, 0, 0
    failed_tools = []
    
    if not tools:
        log_message("WARNING", "No tools selected for installation")
        return
    
    layout = Layout()
    layout.split_column(
        Layout(name="stats"),
        Layout(name="progress", size=3),
        Layout(name="status", size=3),
        Layout(name="details", size=4)
    )
    
    progress = Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        TaskProgressColumn(),
        TextColumn("[cyan]{task.completed}/{task.total}[/cyan]")
    )
    task = progress.add_task("[cyan]Installing tools...", total=total)
    layout["progress"].update(Panel(progress, title="[bold blue]Installation Progress[/bold blue]", border_style="blue"))
    
    status_text = Text("Preparing installation...")
    layout["status"].update(Panel(status_text, title="[bold blue]Status[/bold blue]", border_style="blue"))
    
    details_table = Table(show_header=True, header_style="bold cyan", box=None)
    details_table.add_column("Tool", style="white")
    details_table.add_column("Status", style="green")
    layout["details"].update(Panel(details_table, title="[bold blue]Recent Actions[/bold blue]", border_style="blue"))
    
    start_time = time.time()
    
    with Live(layout, refresh_per_second=4):
        layout["stats"].update(display_system_stats())
        
        for i, tool in enumerate(tools):
            elapsed = time.strftime("%M:%S", time.gmtime(time.time() - start_time))
            eta = time.strftime("%M:%S", time.gmtime((time.time() - start_time) / (i + 1) * (total - i - 1))) if i > 0 else "--:--"
            
            status_text.plain = f"Installing {tool} ({i+1}/{total}) | Elapsed: {elapsed} | ETA: {eta}"
            layout["status"].update(Panel(status_text, title="[bold blue]Status[/bold blue]", border_style="blue"))
            
            # Update system stats periodically
            if i % 5 == 0:
                layout["stats"].update(display_system_stats())
            
            if is_tool_installed(tool):
                details_table.add_row(tool, "[yellow]Already installed[/yellow]")
                log_message("INFO", f"{tool} already installed, skipping...", False)
                skipped += 1
            else:
                if install_tool(tool):
                    details_table.add_row(tool, "[green]Success[/green]")
                    log_message("SUCCESS", f"Installed {tool}", False)
                    successful += 1
                else:
                    details_table.add_row(tool, "[red]Failed[/red]")
                    log_message("ERROR", f"Failed to install {tool}", False)
                    failed += 1
                    failed_tools.append(tool)
            
            # Keep table size reasonable by removing oldest entries
            if len(details_table.rows) > 10:
                details_table.rows.pop(0)
                
            progress.update(task, advance=1)
            
            # Update system stats after each operation
            layout["stats"].update(display_system_stats())
    
    # Final status update
    console.print(display_system_stats())
    
    # Display summary
    summary = Table(title="[bold blue]Installation Summary[/bold blue]", show_header=True, header_style="bold cyan")
    summary.add_column("Status", style="white")
    summary.add_column("Count", style="cyan", justify="right")
    summary.add_column("Details", style="dim")
    
    total_time = time.strftime("%M:%S", time.gmtime(time.time() - start_time))
    summary.add_row("[green]✓ Successful[/green]", str(successful), "")
    summary.add_row("[red]✗ Failed[/red]", str(failed), "")
    summary.add_row("[yellow]⚠ Skipped[/yellow]", str(skipped), "Already installed")
    summary.add_row("⏱ Total time", "", total_time)
    
    console.print(summary)
    
    if failed_tools:
        failed_list = ", ".join(failed_tools[:5])
        if len(failed_tools) > 5:
            failed_list += f" and {len(failed_tools) - 5} more"
        console.print(f"[bold red]Failed tools:[/bold red] {failed_list}")
        
        if Confirm.ask("Save list of failed tools for later?"):
            with open(f"{LOG_DIR}/failed_tools.txt", "w") as f:
                f.write("\n".join(failed_tools))
            console.print(f"[green]List saved to {LOG_DIR}/failed_tools.txt[/green]")

def main():
    """Main function to orchestrate the PentsT toolkit installation."""
    console.print("[bold cyan]PentsT Toolkit Installer[/bold cyan]")
    console.print("[dim]This utility will help you install specialized security tools.[/dim]")
    
    # Check privileges first
    check_privileges()
    
    # Display current system resources
    console.print(display_system_stats())
    
    # Set up repositories
    add_pentst_repos()
    
    # Get tool selection from user
    console.print("[bold cyan]Tool Selection[/bold cyan]")
    tools = offer_installation_options()
    
    if not tools:
        console.print("[yellow]No tools selected, exiting.[/yellow]")
        return
    
    console.print(f"[bold blue]Ready to install {len(tools)} tools...[/bold blue]")
    if Confirm.ask("Continue with installation?"):
        install_pentst_tools(tools)
        log_message("SUCCESS", "PentsT toolkit installation completed")
    else:
        console.print("[yellow]Installation cancelled.[/yellow]")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        console.print("\n[yellow]Operation cancelled by user[/yellow]")
        sys.exit(0)
    except Exception as e:
        console.print(f"[bold red]An error occurred: {str(e)}[/bold red]")
        log_message("ERROR", f"Unhandled exception: {str(e)}")
        sys.exit(1)
